                      ;       SYS vblast_address WITH REG(X)=VARPTR(line_height_array), REG(Y)=PEEK(VARPTR(color_array), REG(U)=PEEK(VARPTR(vblast_target))
0000  16019E                          LBRA DRAW_ALL
                      
                      
                      ; constants
00C8                  SCREEN_HEIGHT   EQU 200      ; const screen height
0080                  SCREEN_WIDTH    EQU 128      ; const screen height
000E                  SKY_COLOR       EQU 14
00E0                  SKY_COLOR_HI    EQU SKY_COLOR*16
000E                  SKY_COLOR_LO    EQU SKY_COLOR
00EE                  SKY_COLOR_HL    EQU SKY_COLOR_HI+SKY_COLOR_LO
000F                  FLOOR_COLOR     EQU 15
00F0                  FLOOR_COLOR_HI  EQU FLOOR_COLOR*16
000F                  FLOOR_COLOR_LO  EQU FLOOR_COLOR
00FF                  FLOOR_COLOR_HL  EQU FLOOR_COLOR_HI+FLOOR_COLOR_LO
                      
0003  000000280050007800A000C800F0011801400168 PLOTVBASE       fdb $0000, $0028, $0050, $0078, $00A0, $00C8, $00F0, $0118, $0140, $0168
0017  019001B801E0020802300258028002A802D002F8                 fdb $0190, $01B8, $01E0, $0208, $0230, $0258, $0280, $02A8, $02D0, $02F8
002B  032003480370039803C003E80410043804600488                 fdb $0320, $0348, $0370, $0398, $03C0, $03E8, $0410, $0438, $0460, $0488
003F  04B004D8050005280550057805A005C805F00618                 fdb $04B0, $04D8, $0500, $0528, $0550, $0578, $05A0, $05C8, $05F0, $0618
0053  06400668069006B806E0070807300758078007A8                 fdb $0640, $0668, $0690, $06B8, $06E0, $0708, $0730, $0758, $0780, $07A8
0067  07D007F8082008480870089808C008E809100938                 fdb $07D0, $07F8, $0820, $0848, $0870, $0898, $08C0, $08E8, $0910, $0938
007B  0960098809B009D80A000A280A500A780AA00AC8                 fdb $0960, $0988, $09B0, $09D8, $0A00, $0A28, $0A50, $0A78, $0AA0, $0AC8
008F  0AF00B180B400B680B900BB80BE00C080C300C58                 fdb $0AF0, $0B18, $0B40, $0B68, $0B90, $0BB8, $0BE0, $0C08, $0C30, $0C58
00A3  0C800CA80CD00CF80D200D480D700D980DC00DE8                 fdb $0C80, $0CA8, $0CD0, $0CF8, $0D20, $0D48, $0D70, $0D98, $0DC0, $0DE8
00B7  0E100E380E600E880EB00ED80F000F280F500F78                 fdb $0E10, $0E38, $0E60, $0E88, $0EB0, $0ED8, $0F00, $0F28, $0F50, $0F78
00CB  0FA00FC80FF0101810401068109010B810E01108                 fdb $0FA0, $0FC8, $0FF0, $1018, $1040, $1068, $1090, $10B8, $10E0, $1108
00DF  11301158118011A811D011F81220124812701298                 fdb $1130, $1158, $1180, $11A8, $11D0, $11F8, $1220, $1248, $1270, $1298
00F3  12C012E8131013381360138813B013D814001428                 fdb $12C0, $12E8, $1310, $1338, $1360, $1388, $13B0, $13D8, $1400, $1428
0107  1450147814A014C814F0151815401568159015B8                 fdb $1450, $1478, $14A0, $14C8, $14F0, $1518, $1540, $1568, $1590, $15B8
011B  15E0160816301658168016A816D016F817201748                 fdb $15E0, $1608, $1630, $1658, $1680, $16A8, $16D0, $16F8, $1720, $1748
012F  1770179817C017E8181018381860188818B018D8                 fdb $1770, $1798, $17C0, $17E8, $1810, $1838, $1860, $1888, $18B0, $18D8
0143  190019281950197819A019C819F01A181A401A68                 fdb $1900, $1928, $1950, $1978, $19A0, $19C8, $19F0, $1A18, $1A40, $1A68
0157  1A901AB81AE01B081B301B581B801BA81BD01BF8                 fdb $1A90, $1AB8, $1AE0, $1B08, $1B30, $1B58, $1B80, $1BA8, $1BD0, $1BF8
016B  1C201C481C701C981CC01CE81D101D381D601D88                 fdb $1C20, $1C48, $1C70, $1C98, $1CC0, $1CE8, $1D10, $1D38, $1D60, $1D88
017F  1DB01DD81E001E281E501E781EA01EC81EF01F18                 fdb $1DB0, $1DD8, $1E00, $1E28, $1E50, $1E78, $1EA0, $1EC8, $1EF0, $1F18
                      
                      
                      ; input
0193  0000            HEIGHT_ARRAY    FDB $0000    ; const line height array pointer
0195  0000            COLOR_ARRAY     FDB $0000    ; const line color array pointer
0197  4008            SCREEN_START    FDB $4008    ; const screen pointer
                      
                      ; variables
0199  0000            HEIGHT_ARRAY_P  FDB $0000
019B  0000            HEIGHT_ARRAY_P2 FDB $0000
019D  0000            COLOR_ARRAY_P   FDB $0000
019F  0000            COLOR_ARRAY_P2  FDB $0000
                      
                      
                                      ; activate RAMA or RAMB
                                      ; pixels 0,1 in RAMA, pixels 2,3 in RAMB
01A1  3476            DRAW_ALL        PSHS A,B,X,Y,U
01A3  AF8CED                          STX HEIGHT_ARRAY,PCR             ; backup param bbb
01A6  10AF8CEB                        STY COLOR_ARRAY,PCR              ; backup param
01AA  EF8CEA                          STU SCREEN_START,PCR             ; backup param
                      
01AD  B6E7C3          RAMA            LDA $E7C3
01B0  8A01                            ORA #01
01B2  B7E7C3                          STA $E7C3
01B5  C600                            LDB #0
01B7  8D1A            LOOP_EVEN       BSR DRAW_COL       ; (B: col id)
01B9  CB04                            ADDB #4
01BB  C180                            CMPB #SCREEN_WIDTH
01BD  25F8                            BLO LOOP_EVEN
                      
01BF  B6E7C3          RAMB            LDA $E7C3
01C2  84FE                            ANDA #$FE
01C4  B7E7C3                          STA $E7C3
01C7  C602                            LDB #2
01C9  8D08            LOOP_ODD        BSR DRAW_COL       ; (B: col id)
01CB  CB04                            ADDB #4
01CD  C182                            CMPB #SCREEN_WIDTH+2
01CF  25F8                            BLO LOOP_ODD
                      
01D1  35F6            DRAW_ALL_END    PULS U,Y,X,B,A,PC         ; cleanup and RTS
                      
                                      
                                      ; input:
                                      ;   B: col_id
01D3  3416            DRAW_COL        PSHS A,B,X
                      
01D5  AE8CBB                          LDX HEIGHT_ARRAY,PCR
01D8  3A                              ABX
01D9  AF8CBD                          STX HEIGHT_ARRAY_P,PCR
01DC  3001                            LEAX 1,X
01DE  AF8CBA                          STX HEIGHT_ARRAY_P2,PCR
01E1  AE8CB1                          LDX COLOR_ARRAY,PCR
01E4  3A                              ABX
01E5  AF8CB5                          STX COLOR_ARRAY_P,PCR
01E8  3001                            LEAX 1,X
01EA  AF8CB2                          STX COLOR_ARRAY_P2,PCR
                      
                                      ; compute first pixel address   4 pixels per octet => base_address + col_id / 4
01ED  AE8CA7                          LDX SCREEN_START,PCR
                      
01F0  54                              LSRB                    ; divide col_id by 4
01F1  54                              LSRB
01F2  3A                              ABX                     ; X contains the address of the first column pixel
                      
                                      ; check if the height of row1 is higher than the height of row2
01F3  E69CA3                          LDB [HEIGHT_ARRAY_P,PCR]
01F6  E19CA2                          CMPB [HEIGHT_ARRAY_P2,PCR]
01F9  253C                            BLO DRAW_COL_H2
                      
01FB                  DRAW_COL_H1     ; segment 1 : count = sky_height=middle - line_height1, color = sky, sky
01FB  C6C8                            LDB #SCREEN_HEIGHT
01FD  54                              LSRB                    ; middle = screen_height / 2
01FE  E09C98                          SUBB [HEIGHT_ARRAY_P,PCR]
0201  3404                            PSHS B                  ; backup B
0203  86EE                            LDA #SKY_COLOR_HL
0205  8D74                            BSR VBLAST
                      
                                      ; segment 2 : count = line_height1 - line_height2, color = color1, sky
0207  E69C8F                          LDB [HEIGHT_ARRAY_P,PCR]
020A  E09C8E                          SUBB [HEIGHT_ARRAY_P2,PCR]
020D  A69C8D                          LDA [COLOR_ARRAY_P,PCR]
0210  48                              LSLA                     ; color pixel1 * 16
0211  48                              LSLA
0212  48                              LSLA
0213  48                              LSLA
0214  8B0E                            ADDA #SKY_COLOR_LO
0216  3406                            PSHS A,B                 ; backup A, B
0218  8D61                            BSR VBLAST
                      
                                      ; segment 3 : count = line_height2 * 2, color = color1, color2
021A  E69DFF7D                        LDB [HEIGHT_ARRAY_P2,PCR]
021E  58                              LSLB                    ; line_height2 * 2
021F  84F0                            ANDA #$F0
0221  AB9DFF7A                        ADDA [COLOR_ARRAY_P2,PCR]
0225  8D54                            BSR VBLAST            
                      
                                      ; segment 4 : count = line_height1 - line_height2, color = color1, floor
0227  3506                            PULS A,B                 ; restore A, B saved during segment2
0229  84F0                            ANDA #$F0
022B  8B0F                            ADDA #FLOOR_COLOR_LO
022D  8D4C                            BSR VBLAST
                      
                                      ; segment 5 : count = count = sky_height=middle - line_height1, color = floor, floor
022F  3504                            PULS B
0231  86FF                            LDA #FLOOR_COLOR_HL
0233  8D46                            BSR VBLAST
0235  2042                            BRA DRAW_COL_END
                      
0237                  DRAW_COL_H2     ; segment 1 : count = sky_height=middle - line_height2, color = sky, sky
0237  C6C8                            LDB #SCREEN_HEIGHT
0239  54                              LSRB                    ; middle = screen_height / 2
023A  E09DFF5D                        SUBB [HEIGHT_ARRAY_P2,PCR]
023E  3404                            PSHS B                  ; backup B
0240  86EE                            LDA #SKY_COLOR_HL
0242  8D37                            BSR VBLAST
                      
                                      ; segment 2 : count = line_height2 - line_height1, color = sky, color2
0244  E69DFF53                        LDB [HEIGHT_ARRAY_P2,PCR]
0248  E09DFF4D                        SUBB [HEIGHT_ARRAY_P,PCR]
024C  A69DFF4F                        LDA [COLOR_ARRAY_P2,PCR]
0250  8BE0                            ADDA #SKY_COLOR_HI
0252  3404                            PSHS B                 ; backup B
0254  8D25                            BSR VBLAST
                      
                                      ; segment 3 : count = line_height2 * 2, color = color1, color2
0256  E69DFF3F                        LDB [HEIGHT_ARRAY_P,PCR]
025A  58                              LSLB                    ; line_height2 * 2
025B  A69DFF3E                        LDA [COLOR_ARRAY_P,PCR]
025F  48                              LSLA                    ; color pixel1 * 16
0260  48                              LSLA
0261  48                              LSLA
0262  48                              LSLA
0263  AB9DFF38                        ADDA [COLOR_ARRAY_P2,PCR]
0267  8D12                            BSR VBLAST
                      
                                      ; segment 4 : count = line_height1 - line_height2, color = color1, floor
0269  3504                            PULS B                  ; restore B saved during segment2
026B  A69DFF30                        LDA [COLOR_ARRAY_P2,PCR]
026F  8BF0                            ADDA #FLOOR_COLOR_HI
0271  8D08                            BSR VBLAST
                      
                                      ; segment 5 : count = count = sky_height=middle - line_height2, color = floor, floor
0273  3504                            PULS B                  ; restore B saved during segment1
0275  86FF                            LDA #FLOOR_COLOR_HL
0277  8D02                            BSR VBLAST
                      
0279  3596            DRAW_COL_END    PULS A,B,X, PC  ; cleanup and RTS
                      
027B                  VBLAST          ; input:
                                      ;   B: count
                                      ;   A: data
                                      ;   X: target address
                                      ; output:
                                      ;   X: next target address
                      
027B  3446                            PSHS A, B, U
027D  4F                              CLRA                   ; compute LBRA target (4 bytes per pixel, 100 pixels max)
                                                             ; target=(100-pixel count) * 4
027E  50                              NEGB                   ; D=100-pixel count
027F  CB64                            ADDB #100
0281  58                              LSLB                   ; multiply D by 4 (each STA takes 4 bytes)
0282  49                              ROLA
0283  58                              LSLB
0284  49                              ROLA
0285  ED8C03                          STD VBLAST_GOTO+1,PCR  ; self modifying code : rewrite LBRA target
0288  A6E4                            LDA ,S                 ; get vblast_byte
028A  167D73          VBLAST_GOTO     LBRA $8000             ; fake 16bits value, dynamically replaced by computed target
028D  A7890F78        VBLAST_PIXELS   STA 3960,X
0291  A7890F50                        STA 3920,X
0295  A7890F28                        STA 3880,X
0299  A7890F00                        STA 3840,X
029D  A7890ED8                        STA 3800,X
02A1  A7890EB0                        STA 3760,X
02A5  A7890E88                        STA 3720,X
02A9  A7890E60                        STA 3680,X
02AD  A7890E38                        STA 3640,X
02B1  A7890E10                        STA 3600,X
02B5  A7890DE8                        STA 3560,X
02B9  A7890DC0                        STA 3520,X
02BD  A7890D98                        STA 3480,X
02C1  A7890D70                        STA 3440,X
02C5  A7890D48                        STA 3400,X
02C9  A7890D20                        STA 3360,X
02CD  A7890CF8                        STA 3320,X
02D1  A7890CD0                        STA 3280,X
02D5  A7890CA8                        STA 3240,X
02D9  A7890C80                        STA 3200,X
02DD  A7890C58                        STA 3160,X
02E1  A7890C30                        STA 3120,X
02E5  A7890C08                        STA 3080,X
02E9  A7890BE0                        STA 3040,X
02ED  A7890BB8                        STA 3000,X
02F1  A7890B90                        STA 2960,X
02F5  A7890B68                        STA 2920,X
02F9  A7890B40                        STA 2880,X
02FD  A7890B18                        STA 2840,X
0301  A7890AF0                        STA 2800,X
0305  A7890AC8                        STA 2760,X
0309  A7890AA0                        STA 2720,X
030D  A7890A78                        STA 2680,X
0311  A7890A50                        STA 2640,X
0315  A7890A28                        STA 2600,X
0319  A7890A00                        STA 2560,X
031D  A78909D8                        STA 2520,X
0321  A78909B0                        STA 2480,X
0325  A7890988                        STA 2440,X
0329  A7890960                        STA 2400,X
032D  A7890938                        STA 2360,X
0331  A7890910                        STA 2320,X
0335  A78908E8                        STA 2280,X
0339  A78908C0                        STA 2240,X
033D  A7890898                        STA 2200,X
0341  A7890870                        STA 2160,X
0345  A7890848                        STA 2120,X
0349  A7890820                        STA 2080,X
034D  A78907F8                        STA 2040,X
0351  A78907D0                        STA 2000,X
0355  A78907A8                        STA 1960,X
0359  A7890780                        STA 1920,X
035D  A7890758                        STA 1880,X
0361  A7890730                        STA 1840,X
0365  A7890708                        STA 1800,X
0369  A78906E0                        STA 1760,X
036D  A78906B8                        STA 1720,X
0371  A7890690                        STA 1680,X
0375  A7890668                        STA 1640,X
0379  A7890640                        STA 1600,X
037D  A7890618                        STA 1560,X
0381  A78905F0                        STA 1520,X
0385  A78905C8                        STA 1480,X
0389  A78905A0                        STA 1440,X
038D  A7890578                        STA 1400,X
0391  A7890550                        STA 1360,X
0395  A7890528                        STA 1320,X
0399  A7890500                        STA 1280,X
039D  A78904D8                        STA 1240,X
03A1  A78904B0                        STA 1200,X
03A5  A7890488                        STA 1160,X
03A9  A7890460                        STA 1120,X
03AD  A7890438                        STA 1080,X
03B1  A7890410                        STA 1040,X
03B5  A78903E8                        STA 1000,X
03B9  A78903C0                        STA 960,X
03BD  A7890398                        STA 920,X
03C1  A7890370                        STA 880,X
03C5  A7890348                        STA 840,X
03C9  A7890320                        STA 800,X
03CD  A78902F8                        STA 760,X
03D1  A78902D0                        STA 720,X
03D5  A78902A8                        STA 680,X
03D9  A7890280                        STA 640,X
03DD  A7890258                        STA 600,X
03E1  A7890230                        STA 560,X
03E5  A7890208                        STA 520,X
03E9  A78901E0                        STA 480,X
03ED  A78901B8                        STA 440,X
03F1  A7890190                        STA 400,X
03F5  A7890168                        STA 360,X
03F9  A7890140                        STA 320,X
03FD  A7890118                        STA 280,X
0401  A78900F0                        STA 240,X
0405  A78900C8                        STA 200,X
0409  A78900A0                        STA 160,X
040D  A7890078                        STA >120,X             ; force 16 bits increment
0411  A7890050                        STA >80,X              ; force 16 bits increment
0415  A7890028                        STA >40,X              ; force 16 bits increment
0419  A7890000                        STA >0,X               ; force 16 bits increment
                      
041D  4F                              CLRA
041E  E661                            LDB 1,S                ; table index = pixel count * 2
0420  58                              LSLB
0421  338DFBDE                        LEAU PLOTVBASE,PCR     ; table base address
0425  ECCB                            LDD D,U                ; get offset from table  (using D because addressing offset is signed)
0427  308B                            LEAX D,X               ; add offset to X 
                      
0429  35C6                            PULS U, B, A, PC       ; cleanup and RTS
                      
042B                                  END
